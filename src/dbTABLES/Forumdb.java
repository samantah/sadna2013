package dbTABLES;

// Generated May 29, 2013 2:33:53 AM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;

import Sadna.db.Forum;
import Sadna.db.Policy;
import Sadna.db.PolicyEnums.enumAssignModerator;
import Sadna.db.PolicyEnums.enumCancelModerator;
import Sadna.db.PolicyEnums.enumDelete;
import Sadna.db.PolicyEnums.enumMessageContent;
import Sadna.db.PolicyEnums.enumModeratorPermissions;
import Sadna.db.PolicyEnums.enumNotiFriends;
import Sadna.db.PolicyEnums.enumNotiImidiOrAgre;
import Sadna.db.PolicyEnums.enumSecurity;

/**
 * Forumdb generated by hbm2java
 */
public class Forumdb implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1162767034713145063L;
	private Integer idforum;
	private Memberdb memberdb;
	private String forumName;
	private String enumNotiImidiOrAgre;
	private String enumNotiFriends;
	private String enumDelete;
	private String enumAssignModerator;
	private String enumCancelModerator;
	private Integer seniority;
	private Integer minPublish;
	private String enumModeratorPermission;
	private String enumSecurityPolicy;
	private String forbiddenWords;
	private Set<Memberdb> memberdbs = new HashSet<Memberdb>(0);
	private Set<Subforumdb> subforumdbs = new HashSet<Subforumdb>(0);
	private String enumMsgFilter;
	public Forumdb() {
	}
	
	public Forumdb(String forumName,
			String enumNotiImidiOrAgre, String enumNotiFriends,
			String enumDelete, String enumAssignModerator,
			String enumCancelModerator, Integer seniority, Integer minPublish,
			String messageContentPolicy, String moderatorPermissionPolicy,
			String emailPolicy, String forbiddenWords){
		this.forumName = forumName;
		this.enumNotiImidiOrAgre = enumNotiImidiOrAgre;
		this.enumNotiFriends = enumNotiFriends;
		this.enumDelete = enumDelete;
		this.enumAssignModerator = enumAssignModerator;
		this.enumCancelModerator = enumCancelModerator;
		this.seniority = seniority;
		this.minPublish = minPublish;
		this.enumMsgFilter = messageContentPolicy;
		this.setEnumModeratorPermission(moderatorPermissionPolicy);
		this.setEnumSecurityPolicy(emailPolicy);
		this.forbiddenWords = forbiddenWords;
		
	}

	public Forumdb(Memberdb memberdb, String forumName,
			String enumNotiImidiOrAgre, String enumNotiFriends,
			String enumDelete, String enumAssignModerator,
			String enumCancelModerator, Integer seniority, Integer minPublish,
			String messageContentPolicy, String moderatorPermissionPolicy,
			String emailPolicy, Set<Memberdb> memberdbs, Set<Subforumdb> subforumdbs) {
		this.memberdb = memberdb;
		this.forumName = forumName;
		this.enumNotiImidiOrAgre = enumNotiImidiOrAgre;
		this.enumNotiFriends = enumNotiFriends;
		this.enumDelete = enumDelete;
		this.enumAssignModerator = enumAssignModerator;
		this.enumCancelModerator = enumCancelModerator;
		this.seniority = seniority;
		this.minPublish = minPublish;
		this.enumMsgFilter = messageContentPolicy;
		this.setEnumModeratorPermission(moderatorPermissionPolicy);
		this.setEnumSecurityPolicy(emailPolicy);
		this.memberdbs = memberdbs;
		this.subforumdbs = subforumdbs;
	}

	public Forum convertToForum(){
		enumNotiImidiOrAgre imidOrArgeNotiPolicy = null;
		enumNotiFriends friendsNotiPolicy = null;
		enumDelete deletePolicy = null;
		enumAssignModerator assignModeratorPolicy = null;
		enumCancelModerator cancelModeratorPolicy = null;
		enumMessageContent messageContentPolicy = null;
		enumSecurity emailPolicy = null;
		enumModeratorPermissions moderatorPermissionPolicy = null;
		switch (enumNotiImidiOrAgre) {
		case ("IMIDIATE"):
			imidOrArgeNotiPolicy = Sadna.db.PolicyEnums.enumNotiImidiOrAgre.IMIDIATE;
		break;
		case ("AGGREGATE"):
			imidOrArgeNotiPolicy = Sadna.db.PolicyEnums.enumNotiImidiOrAgre.AGGREGATE;
		break;
		}
		switch (enumNotiFriends) {
		case ("ALLMEMBERS"):
			friendsNotiPolicy = Sadna.db.PolicyEnums.enumNotiFriends.ALLMEMBERS;
		break;
		case ("PUBLISHERS"):
			friendsNotiPolicy = Sadna.db.PolicyEnums.enumNotiFriends.PUBLISHERS;
		break;
		}
		switch (enumDelete) {
		case ("LIMITED"):
			deletePolicy = Sadna.db.PolicyEnums.enumDelete.LIMITED;
		break;
		case ("EXTENDED"):
			deletePolicy = Sadna.db.PolicyEnums.enumDelete.EXTENDED;
		break;
		}
		switch (enumAssignModerator) {
		case ("NO_RESTRICTION"):
			assignModeratorPolicy = Sadna.db.PolicyEnums.enumAssignModerator.NO_RESTRICTION;
		break;
		case ("MIN_PUBLISH"):
			assignModeratorPolicy = Sadna.db.PolicyEnums.enumAssignModerator.MIN_PUBLISH;
		break;
		case ("SENIORITY"):
			assignModeratorPolicy = Sadna.db.PolicyEnums.enumAssignModerator.SENIORITY;
		break;
		}
		switch (enumCancelModerator) {
		case ("NO_RESTRICTION"):
			cancelModeratorPolicy = Sadna.db.PolicyEnums.enumCancelModerator.NO_RESTRICTION;
		break;
		case ("RESTRICTED"):
			cancelModeratorPolicy = Sadna.db.PolicyEnums.enumCancelModerator.RESTRICTED;
		break;
		}
		switch (this.enumMsgFilter) {
		case ("FILTERED"):
			messageContentPolicy = Sadna.db.PolicyEnums.enumMessageContent.FILTERED;
		break;
		case ("NOT_FILTERED"):
			messageContentPolicy = Sadna.db.PolicyEnums.enumMessageContent.NOT_FILTERED;
		break;
		}
		switch (this.enumModeratorPermission) {
		case ("LIMITED"):
			moderatorPermissionPolicy = Sadna.db.PolicyEnums.enumModeratorPermissions.LIMITED;
		break;
		case ("EXTENDED"):
			moderatorPermissionPolicy = Sadna.db.PolicyEnums.enumModeratorPermissions.EXTENDED;
		break;
		}
		switch (this.enumSecurityPolicy) {
		case ("VERIFY_EMAIL"):
			emailPolicy = Sadna.db.PolicyEnums.enumSecurity.VERIFY_EMAIL;
		break;
		case ("NOT_USED_EMAIL"):
			emailPolicy = Sadna.db.PolicyEnums.enumSecurity.NOT_USED_EMAIL;				
		break;
		}
		Policy p = new Policy(imidOrArgeNotiPolicy, friendsNotiPolicy, deletePolicy, assignModeratorPolicy, cancelModeratorPolicy, 
				messageContentPolicy, moderatorPermissionPolicy, emailPolicy, seniority, minPublish);
		return new Forum(forumName, p, this.forbiddenWords);
	}
	
	public Integer getIdforum() {
		return this.idforum;
	}

	public void setIdforum(Integer idforum) {
		this.idforum = idforum;
	}

	public Memberdb getMemberdb() {
		return this.memberdb;
	}

	public void setMemberdb(Memberdb memberdb) {
		this.memberdb = memberdb;
	}

	public String getForumName() {
		return this.forumName;
	}

	public void setForumName(String forumName) {
		this.forumName = forumName;
	}

	public String getEnumNotiImidiOrAgre() {
		return this.enumNotiImidiOrAgre;
	}

	public void setEnumNotiImidiOrAgre(String enumNotiImidiOrAgre) {
		this.enumNotiImidiOrAgre = enumNotiImidiOrAgre;
	}

	public String getEnumNotiFriends() {
		return this.enumNotiFriends;
	}

	public void setEnumNotiFriends(String enumNotiFriends) {
		this.enumNotiFriends = enumNotiFriends;
	}

	public String getEnumDelete() {
		return this.enumDelete;
	}

	public void setEnumDelete(String enumDelete) {
		this.enumDelete = enumDelete;
	}

	public String getEnumAssignModerator() {
		return this.enumAssignModerator;
	}

	public void setEnumAssignModerator(String enumAssignModerator) {
		this.enumAssignModerator = enumAssignModerator;
	}

	public String getEnumCancelModerator() {
		return this.enumCancelModerator;
	}

	public void setEnumCancelModerator(String enumCancelModerator) {
		this.enumCancelModerator = enumCancelModerator;
	}

	public Integer getSeniority() {
		return this.seniority;
	}

	public void setSeniority(Integer seniority) {
		this.seniority = seniority;
	}

	public Integer getMinPublish() {
		return this.minPublish;
	}

	public void setMinPublish(Integer minPublish) {
		this.minPublish = minPublish;
	}

	public Set<Memberdb> getMemberdbs() {
		return this.memberdbs;
	}

	public void setMemberdbs(Set<Memberdb> memberdbs) {
		this.memberdbs = memberdbs;
	}

	public Set<Subforumdb> getSubforumdbs() {
		return this.subforumdbs;
	}

	public void setSubforumdbs(Set<Subforumdb> subforumdbs) {
		this.subforumdbs = subforumdbs;
	}

	public String getForbiddenWords() {
		return forbiddenWords;
	}

	public void setForbiddenWords(String forbiddenWords) {
		this.forbiddenWords = forbiddenWords;
	}
	
	public List<String> forbiddenWordsStringToList(){
		List retVal = new ArrayList<>();
		StringTokenizer st = new StringTokenizer(this.forbiddenWords, " \n\r");
		while (st.hasMoreTokens()){
			String s = st.nextToken();
			retVal.add(s);
		}
		return retVal;
	}


	public String getEnumModeratorPermission() {
		return enumModeratorPermission;
	}

	public void setEnumModeratorPermission(String enumModeratorPermission) {
		this.enumModeratorPermission = enumModeratorPermission;
	}

	public String getEnumSecurityPolicy() {
		return enumSecurityPolicy;
	}

	public void setEnumSecurityPolicy(String enumSecurityPolicy) {
		this.enumSecurityPolicy = enumSecurityPolicy;
	}

	public String getEnumMsgFilter() {
		return enumMsgFilter;
	}

	public void setEnumMsgFilter(String enumMsgFilter) {
		this.enumMsgFilter = enumMsgFilter;
	}

}
